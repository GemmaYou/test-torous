{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["USDT","App","useState","web3Modal","setWeb3Modal","provider","setProvider","signer","setSigner","address","setAddress","chainId","setChainId","balance","setBalance","to","setTo","useEffect","isEmpty","getBalance","login","providerOptions","walletconnect","package","WalletConnectProvider","options","rpc","qrcodeModalOptions","mobileLinks","torus","Torus","networkParams","host","initWeb3Modal","Web3Modal","connect","request","method","params","ethers","utils","hexValue","console","log","networkName","web3Provider","providers","Web3Provider","getSigner","getAddress","getNetwork","network","contract","Contract","VegasONE","decimals","balanceOf","formatUnits","transfer","parseUnits","tx","wait","logout","clearCachedProvider","disconnect","className","onClick","type","onChange","e","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fff6ed1.chunk.js","sourcesContent":["import Torus from \"@toruslabs/torus-embed\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport VegasONE from \"./abi/VegasONE.json\";\nimport { isEmpty } from \"lodash\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Web3Modal from \"web3modal\";\n\nconst USDT = \"0xd691aCE60338a304cb0e5e7F82d77e81f02A248f\";\n\nfunction App() {\n  const [web3Modal, setWeb3Modal] = useState();\n  const [provider, setProvider] = useState();\n  const [signer, setSigner] = useState();\n  const [address, setAddress] = useState(\"\");\n  const [chainId, setChainId] = useState();\n  const [balance, setBalance] = useState();\n  const [to, setTo] = useState(\"\");\n\n  useEffect(() => {\n    !isEmpty(signer) && getBalance();\n  }, [signer]);\n\n  const login = async () => {\n    const providerOptions = {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          rpc: { 1172: \"https://testnet-rpc.vegas.one\" }, // required\n          chainId: [1172],\n        },\n        qrcodeModalOptions: {\n          mobileLinks: [\"metamask\"],\n        },\n      },\n      torus: {\n        package: Torus,\n        options: {\n          networkParams: {\n            host: \"https://testnet-rpc.vegas.one\",\n            chainId: 1172,\n          },\n        },\n      },\n    };\n\n    let initWeb3Modal = new Web3Modal({\n      // disableInjectedProvider: false,\n      // cacheProvider: false,\n      providerOptions, // required\n    });\n\n    const provider = await initWeb3Modal.connect();\n\n    if (!provider.torus) {\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: ethers.utils.hexValue(1172) }],\n      });\n    } else {\n      console.log(provider.chainId);\n      if (provider.chainId !== 1172)\n        await provider.torus.setProvider({\n          host: \"https://testnet-rpc.vegas.one\",\n          chainId: \"1172\",\n          networkName: \"testnet\",\n        });\n    }\n    const web3Provider = new ethers.providers.Web3Provider(provider);\n    const signer = web3Provider.getSigner();\n    const address = await signer.getAddress();\n    const network = await web3Provider.getNetwork();\n    console.log(\"currently address : \", address);\n    console.log(\"currently network : \", network);\n    setAddress(address);\n    setChainId(network.chainId);\n    setWeb3Modal(initWeb3Modal);\n    setProvider(web3Provider);\n    setSigner(signer);\n  };\n\n  const getBalance = async () => {\n    const contract = new ethers.Contract(USDT, VegasONE[\"abi\"], signer);\n    const decimals = await contract.decimals();\n    setBalance(\n      ethers.utils.formatUnits(\n        await contract.balanceOf(await signer.getAddress()),\n        decimals\n      )\n    );\n  };\n\n  const transfer = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n\n    const contract = new ethers.Contract(USDT, VegasONE[\"abi\"], signer);\n    const decimals = await contract.decimals();\n\n    let tx = await contract.transfer(\n      to,\n      ethers.utils.parseUnits(\"1\", decimals)\n    );\n    await tx.wait();\n    getBalance();\n  };\n\n  const logout = async () => {\n    if (!provider) return;\n    await web3Modal.clearCachedProvider();\n    if (provider.disconnect) await provider.disconnect();\n    setWeb3Modal(null);\n    setProvider(null);\n    setSigner(null);\n    setAddress(\"\");\n    setChainId();\n    console.log(\n      \"logout!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      {isEmpty(signer) && <button onClick={login}>login</button>}\n      {!isEmpty(signer) && <button onClick={logout}>logout</button>}\n      <p>address: {address}</p>\n      <p>chainId: {chainId}</p>\n      <p>balance: {balance}</p>\n      <div className=\"transfer\">\n        <div className=\"input-group\">\n          <p>固定轉出：USDT * 1</p>\n          <div className=\"transfer-to\">\n            <p>to address: </p>\n            <input type=\"text\" onChange={(e) => setTo(e.target.value)} />\n          </div>\n        </div>\n        <button onClick={transfer}>transfer</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.js\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}