{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getAddress","provider","web3auth","setSigner","setAddress","setUser","signer","getSigner","address","getUserInfo","user","App","useState","setWeb3auth","setProvider","balanceOf","setBalanceOf","value","setValue","to","setTo","ERC20","setERC20","useEffect","init","torus","Torus","network","host","chainId","showTorusButton","console","log","ethProvider","ethers","providers","Web3Provider","isLoggedIn","login","logout","transfer","contract","Contract","VegasONE","utils","parseEther","gasLimit","tx","wait","getBalance","isAddress","myBalance","BigNumber","from","div","pow","toString","className","isEmpty","onClick","name","type","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c4ab65e.chunk.js","sourcesContent":["import Torus from \"@toruslabs/torus-embed\";\nimport \"./App.css\";\nimport { ethers, BigNumber } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport VegasONE from \"./abi/VegasONE.json\";\nimport { isEmpty } from \"lodash\";\n\n// 用來測試是否有的 token\n// const ERC20 = \"0x00b8a4698970ad1d724360804E2864785A4BB1A5\";\n\nconst getAddress = async (\n  provider,\n  web3auth,\n  setSigner,\n  setAddress,\n  setUser\n  // setBalanceOf\n) => {\n  let signer = provider.getSigner();\n  setSigner(signer);\n\n  let address = await signer.getAddress();\n  setAddress(address);\n\n  let user = await web3auth.getUserInfo();\n  setUser(user);\n\n  // let contract = new ethers.Contract(ERC20, VegasONE[\"abi\"], signer);\n\n  // let myBalance = await contract.balanceOf(address);\n  // setBalanceOf(\n  //   BigNumber.from(myBalance).div(BigNumber.from(10).pow(18)).toString()\n  // );\n};\n\nfunction App() {\n  const [web3auth, setWeb3auth] = useState();\n  const [provider, setProvider] = useState();\n  const [signer, setSigner] = useState();\n  const [user, setUser] = useState({});\n  const [address, setAddress] = useState(\"\");\n  const [balanceOf, setBalanceOf] = useState(0);\n  const [value, setValue] = useState();\n  const [to, setTo] = useState();\n  const [ERC20, setERC20] = useState();\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const torus = new Torus();\n        // doc for parameters: https://docs.tor.us/wallet/api-reference/class\n        await torus.init({\n          // buildEnv: \"production\",\n          // enableLogging: true,\n          network: {\n            host: \"https://testnet-rpc.vegas.one\",\n            chainId: 1172,\n          },\n          showTorusButton: false,\n        });\n        console.log(torus);\n        setWeb3auth(torus);\n      } catch (err) {\n        console.log(\"init web3auth\", err);\n      }\n    };\n\n    init();\n  }, []);\n\n  useEffect(() => {\n    const getSigner = async () => {\n      let ethProvider = new ethers.providers.Web3Provider(web3auth.provider);\n      setProvider(ethProvider);\n\n      if (web3auth.isLoggedIn) {\n        getAddress(\n          ethProvider,\n          web3auth,\n          setSigner,\n          setAddress,\n          setUser\n          // setBalanceOf\n        );\n      }\n    };\n    if (web3auth) {\n      getSigner();\n    }\n  }, [web3auth]);\n\n  const login = async () => {\n    await web3auth.login(); // await torus.ethereum.enable()\n    getAddress(\n      provider,\n      web3auth,\n      setSigner,\n      setAddress,\n      setUser,\n      setBalanceOf\n    );\n  };\n\n  const logout = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    await web3auth.logout();\n    setUser(null);\n    setSigner(null);\n    setAddress(\"\");\n    setBalanceOf(0);\n  };\n\n  const transfer = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n\n    const contract = new ethers.Contract(ERC20, VegasONE[\"abi\"], signer);\n\n    let tx = await contract.transfer(to, ethers.utils.parseEther(value), {\n      gasLimit: 1e6,\n    });\n\n    await tx.wait();\n\n    await getBalance();\n    // // refresh my balance\n    // let myBalance = await contract.balanceOf(address);\n    // setBalanceOf(\n    //   BigNumber.from(myBalance).div(BigNumber.from(10).pow(18)).toString()\n    // );\n  };\n\n  const getBalance = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n    if (!ethers.utils.isAddress(ERC20)) {\n      console.log(\"ERC20 not valid\");\n      return;\n    }\n\n    const contract = new ethers.Contract(ERC20, VegasONE[\"abi\"], signer);\n\n    // get my balance\n    let myBalance = await contract.balanceOf(address);\n    setBalanceOf(\n      BigNumber.from(myBalance).div(BigNumber.from(10).pow(18)).toString()\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        {isEmpty(address) && <button onClick={login}>login</button>}\n        {!isEmpty(address) && <button onClick={logout}>logout</button>}\n        <p>user: {!isEmpty(user) && user.name}</p>\n        <p>address: {address}</p>\n      </div>\n\n      <div className=\"token\">\n        <div className=\"input-group\">\n          <p>token address: </p>\n          <input type=\"text\" onChange={(e) => setERC20(e.target.value)} />\n        </div>\n        <div className=\"input-group\">\n          <p>My amount: </p>\n          <p>balance of TestCoin: {balanceOf}</p>\n        </div>\n        <button onClick={getBalance}>get balance</button>\n      </div>\n\n      <div className=\"transfer\">\n        <div className=\"input-group\">\n          <p>to address: </p>\n          <input type=\"text\" onChange={(e) => setTo(e.target.value)} />\n        </div>\n        <div className=\"input-group\">\n          <p>amount: </p>\n          <input type=\"text\" onChange={(e) => setValue(e.target.value)} />\n        </div>\n        <button onClick={transfer}>transfer</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.js\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}