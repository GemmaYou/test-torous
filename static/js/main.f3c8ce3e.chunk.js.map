{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ERC20","getAddress","provider","web3auth","setSigner","setAddress","setUser","setBalanceOfMYOC","signer","getSigner","address","getUserInfo","user","contract","ethers","Contract","VegasONE","balanceOf","myBalance","BigNumber","from","div","pow","toString","App","useState","setWeb3auth","setProvider","balanceOfMYOC","value","setValue","to","setTo","test","setTest","useEffect","init","torus","Torus","network","host","chainId","showTorusButton","console","log","ethProvider","providers","Web3Provider","isLoggedIn","login","logout","transfer","utils","parseEther","gasLimit","tx","wait","className","isEmpty","onClick","name","type","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3c8ce3e.chunk.js","sourcesContent":["import Torus from \"@toruslabs/torus-embed\";\nimport \"./App.css\";\nimport { ethers, BigNumber } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport VegasONE from \"./abi/VegasONE.json\";\nimport { isEmpty } from \"lodash\";\n\n// 用來測試是否有的 token\nconst ERC20 = \"0x942a9BcDA94e3B5B83951F9169F37b372a23D392\";\n\nconst getAddress = async (\n  provider,\n  web3auth,\n  setSigner,\n  setAddress,\n  setUser,\n  setBalanceOfMYOC\n) => {\n  let signer = provider.getSigner();\n  setSigner(signer);\n\n  let address = await signer.getAddress();\n  setAddress(address);\n\n  let user = await web3auth.getUserInfo();\n  setUser(user);\n\n  let contract = new ethers.Contract(ERC20, VegasONE[\"abi\"], signer);\n\n  let myBalance = await contract.balanceOf(address);\n  setBalanceOfMYOC(\n    BigNumber.from(myBalance).div(BigNumber.from(10).pow(18)).toString()\n  );\n};\n\nfunction App() {\n  const [web3auth, setWeb3auth] = useState();\n  const [provider, setProvider] = useState();\n  const [signer, setSigner] = useState();\n  const [user, setUser] = useState({});\n  const [address, setAddress] = useState(\"\");\n  const [balanceOfMYOC, setBalanceOfMYOC] = useState(0);\n  const [value, setValue] = useState();\n  const [to, setTo] = useState();\n  const [test, setTest] = useState(0);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const torus = new Torus();\n        // doc for parameters: https://docs.tor.us/wallet/api-reference/class\n        await torus.init({\n          // buildEnv: \"production\",\n          // enableLogging: true,\n          network: {\n            host: \"https://node.taisys.dev/rpc\",\n            chainId: 1068,\n          },\n          showTorusButton: false,\n        });\n        console.log(torus);\n        setWeb3auth(torus);\n      } catch (err) {\n        console.log(\"init web3auth\", err);\n      }\n    };\n\n    init();\n  }, []);\n\n  useEffect(() => {\n    const getSigner = async () => {\n      let ethProvider = new ethers.providers.Web3Provider(web3auth.provider);\n      setProvider(ethProvider);\n\n      if (web3auth.isLoggedIn) {\n        getAddress(\n          ethProvider,\n          web3auth,\n          setSigner,\n          setAddress,\n          setUser,\n          setBalanceOfMYOC\n        );\n      }\n    };\n    if (web3auth) {\n      getSigner();\n    }\n  }, [web3auth]);\n\n  const login = async () => {\n    // setTest();\n    await web3auth.login(); // await torus.ethereum.enable()\n    getAddress(\n      provider,\n      web3auth,\n      setSigner,\n      setAddress,\n      setUser,\n      setBalanceOfMYOC\n    );\n  };\n\n  const logout = async () => {\n    if (!web3auth) {\n      console.log(\"web3auth not initialized yet\");\n      return;\n    }\n    await web3auth.logout();\n    setUser(null);\n    setSigner(null);\n    setAddress(\"\");\n    setBalanceOfMYOC(0);\n  };\n\n  const transfer = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n\n    const contract = new ethers.Contract(ERC20, VegasONE[\"abi\"], signer);\n\n    let tx = await contract.transfer(to, ethers.utils.parseEther(value), {\n      gasLimit: 1e6,\n    });\n\n    await tx.wait();\n\n    // refresh my balance\n    let myBalance = await contract.balanceOf(address);\n    setBalanceOfMYOC(\n      BigNumber.from(myBalance).div(BigNumber.from(10).pow(18)).toString()\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        {isEmpty(address) && (\n          <button\n            onClick={() => {\n              setTest((test) => test + 1);\n              login();\n            }}\n          >\n            login\n          </button>\n        )}\n        {!isEmpty(address) && <button onClick={logout}>logout</button>}\n        <p>count: {test}</p>\n        <p>user: {!isEmpty(user) && user.name}</p>\n        <p>address: {address}</p>\n        <p>balance of MYOC: {balanceOfMYOC}</p>\n      </div>\n      <div className=\"transfer\">\n        <div className=\"input-group\">\n          <p>to address: </p>\n          <input type=\"text\" onChange={(e) => setTo(e.target.value)} />\n        </div>\n        <div className=\"input-group\">\n          <p>amount: </p>\n          <input type=\"text\" onChange={(e) => setValue(e.target.value)} />\n        </div>\n        <button onClick={transfer}>transfer</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.js\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}